const db = require('.')('foo.db');
const sites = [
  'broadly.vice.com',
  'creators.vice.com',
  'https://epimetheus.viceops.net',
  'https://prometheus.viceops.net',
  'i-d.vice.com',
  'impact.vice.com',
  'motherboard.vice.com',
  'munchies.vice.com',
  'news.vice.com',
  'noisey.vice.com',
  'sports.vice.com',
  'thump.vice.com',
  'tonic.vice.com',
  'viceland.vice.com',
  'video.vice.com',
  'waypoint.vice.com',
  'www.vice.com',
];

db.prepare('create table sites (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT UNIQUE NOT NULL)').run();
sites.forEach(url => db.prepare('insert into sites (url) values (?)').run(url));

db.prepare('create table data (id INTEGER PRIMARY KEY AUTOINCREMENT, a TEXT NOT NULL REFERENCES sites (url) ON DELETE CASCADE ON UPDATE CASCADE, b TEXT NOT NULL, c INT NOT NULL, d INT NOT NULL, e INT, f INT)').run();
db.prepare('create index idx_a on data (a, b)');
db.prepare('create index idx_b on data (c, d, f)');
db.prepare('create index idx_c on data (c, d, e, f)');
db.prepare('create index idx_d on data (e)');
db.prepare('create index idx_e on data (a, b, e)');

db.pragma('journal_mode = WAL');
const stmt = db.prepare('insert into data (a, b, c, d, e, f) values (@a, @b, @c, @d, @e, @f)');
const times = [];

function insert(data) {
  stmt.run(data);
}

setTimeout(function request() {
  const t0 = Date.now();
  insert({
    a: sites[Math.floor(Math.random() * sites.length)],
    b: (sites[Math.floor(Math.random() * sites.length)] + sites[Math.floor(Math.random() * sites.length)]).split('').reverse().join(''),
    c: Math.floor(Math.random() * 100000),
    d: Math.floor(Math.random() * 100),
    e: Math.floor(Math.random() * 10),
    f: Math.floor(Math.random() * -10000000)
  });
  times.push(Date.now() - t0);
  if (times.length < 10000) {
    setImmediate(request);
  } else {
    console.log(times.join('\n'));
    db.close();
    require('fs').unlinkSync('foo.db');
  }
}, 10);
